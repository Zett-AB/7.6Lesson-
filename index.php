<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Урок 7.6. Проектирование базы данных. Хранение данных в разных таблицах</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="normalize.css">
</head>

<body>
    <main>
        <header class="title">
            <h1>
                Урок 7.6. Проектирование базы данных. Хранение данных в разных таблицах
            </h1>
            <h4 class="sub-title">
                В этом уроке вы узнаете основы проектирования баз данных и о том, как хранить данные в разных таблицах
            </h4>
        </header>
        <div>
            <?php
            $nickname = "Александр!";
            $hello = "Привет ";
            $offer = "Продолжаем изучение РНР<br>
                        Урок об основах проектирования баз данных и как хранить данные в разных таблицах";

            echo "<h2 class='sub-title-php'>" . $hello . $nickname . "<br>" . "<br>" . $offer . "</h2>";
            ?>
        </div>
        <section class="begin">
            <div class="">
                <p>
                    Проектирование БД является важным для безупречной/отличной работы приложения.<br>
                    Размещение данных со слабоыми взаимосвязями снижает эффиктовность и может вынудить сервер базы данных тратить значительное время на поиск требуемых данных.<br>
                    Разрабатывая структуру БД, обязательно продумайте все вопросы, которые возникнут пр работе с ней.
                </p>
                <p>
                    Говоря простым языком - проектирование БД явялется важным процессом влияющим на работу продукты/приложения, поскольку неправильно спроектированная БД ведет к замедлению работы сервера БД и может привести к "зависанию" работы проекта.<br>
                    К тому же это приведет к нерациональной работе с самой БД, поскольку при большем объеме работы, когда нужно внести много изменений в таблицу БД, придется потратить много времени и самое важно можно внести в БД ошибки.
                </p>
                <p>
                    Также проектирование БД нужно для большей производительности и быстродействия сайта, а главное возможностей сайта.
                </p>
                <p>
                    Проектирование БД подразумевает под собой создание нескольких таблиц взаимосвязанных между собой, при этом есть как правило основаная таблица и данными, которая взаимодействует с другими, но при этом и другие таблицы, также могут взаимодействовать между собой помимо основной таблицы.<br>
                    Взаимодействие в нашем случаи подразумевает обмен данными.
                </p>
                <div class="inform">
                    <h5>
                        Для информации
                    </h5>
                    <p>
                        MySQL- это реляционная база данных. Важнная особенность реляционных систем и их отличие от одноуровневых баз данных - возможностьрасполагать данные в нескольких таблицах.<br>
                        Взаимосвязанные данные можно хранить в отдельных таблицах и объядинять по ключу.<br>
                        Ключ - это отношение(relation) между таблицами.<br>
                        Выбор первичного ключа(primary key) - наиболее важное решение, принимаемое при разработке новой базы данных. Самое главное, что следует понимать, – вы должны гарантировать уникальность выбранного ключа.<br>
                        Если таблица содержит ключевые поля из другой таблицы, то между ними образуется связь – взаимоотношением внешнего ключа (foreign key), например «начальник-подчиненный» или «покупатель-покупка».
                    </p>
                    <p>
                        Представление о взаимоотношениях данных и наиболее эффективном способе их организации называется <b>нормализацией</b>.<br> Нормализация заключается в разделении данных на основе логических взаимоотношений с целью минимизировать дублирование данных.<br> Повторяющиеся данные понапрасну расходуют дисковое пространство сервера и затрудняют их обслуживание. <br>
                        При внесении изменений в повторяющиеся данные есть риск пропустить какие-то из них, что может привести к возникновению несогласованностей в базе данных.
                    </p>
                    <p>
                        С другой стороны, лучшее – враг хорошего: когда данные хранятся по частям в отдельных таблицах, это может потребовать слишком больших накладных расходов на их извлечение, да и запросы могут получаться чересчур замысловатыми.<br>
                        Главная цель – найти золотую середину.
                    </p>
                </div>
            </div>
            <div class="">
                <p>
                    Теперь после краткого вступления и пояснения по данной теме, переходим к практике.<br>
                    В нашем случаи необходимо провести нормализацию нашей БД study7.2lesson
                    с таблицей movie, в которую необходимо ввести категории "фильм" и "сериал"
                </p>
            </div>

        </section>
        <section class="lesson">
            <div class="part-1">
                <p>
                    Давайте начнем.<br>
                    И так задача заключается в том, что нужно добавить в нашу таблицу movie дополнительную информацию, а именно - "фильм" и "сериал".<br>
                    Для решения такой простой на первый взгляд задачи есть как минимум два решение:<br>
                <ul>
                    <li>
                        - добавить в нашу таблицу movie еще один столбец и в нем писать информацию - фильм или сериал.<br>
                        Но в этом случаи, когда у нас будет очень много фильмов и у нас появиться необходимость внести уточнения в данный столбец, нам придется перелапатить большой объем, что не очень удобно и может привести к ошибке.
                    </li>
                    <li>
                        - создаем новую таблицу, например categories в которой создаем два столбца id и name, в id мы указываем номер, а в name пишем категорию "фильм" или "сериал".<br>
                        После этого, мы делаем в нашей таблице movie новый столбец category_id, в котором просто ставим номер соответсвующей категории.
                    </li>
                </ul>
                </p>
                <p>
                    В нашем случаи мы выбираем второй вариант так как для нашей таблице он лучший. Поскольку если нам нужно будет внести изменения в категории, то для этого нам нужно будет зайти в нашу новую таблицу categories и там внести изменения, а не делать их по всей таблице movie.<br>
                    Теперь перейдем непосредственно к практике.
                </p>
            </div>
            <div class="">
                <p>
                    Заходим в панель управления phpMyAdmin открываем нашу БД study7.2lesson и создаем новую таблицу categories.<br>
                    Затем в столбце "Имя" пишем - id, далее в поле Тип выбираем TINYINT, далее в поле Длина/Значение ставим значение 4, после этого в поле Индекс выбираем PRIMARY, далее в поле A_I ставим галочку.<br>
                    Переходиим ко второй строке и в столбце Имя пишем - name, в поле Тип выбираем VARCHAR, далее в поле Длина/Значение ставим 255.<br>
                    Все теперь жмем кнопку Сохранить.<br>
                    Таблица categories создана.
                </p>
                <p>
                    Теперь переходим во вкладу Вставить и заполняем поля.<br>
                    В верхнем первом столбце в поле id ставим 1, в поле name пишем "фильм".<br>
                    Во втором столбце в поле id ставим 2, а в поле name пишем "сериал".<br>
                    Далее жмем кнопку Вперед и видим нашу таблицу categories.
                </p>
                <p>
                    После создания таблицы categories, мы переходим в таблицу movie и добавляем в ней еще один столбец полсе столбца add-date.<br>
                    Чтобы добавить новый столбец нашей таблице movie, жмем наверху на вкладку Структура.<br>
                    Когда откроется вкалдка Структура мы увидим структуру нашей таблицы movie и под ней будет поле Добавить в которое ставми 1(обычно там уже стоит цифра 1), далее в следующем поле выбираем из разворачивающегося списка, куда нужно нам добавить наш новый столбец, в нашем случаи выбираем add_date(как правило в списке всегда указывается последние столбец в таблице), далее жмем Вперед.<br>
                    В октрывшемся окне заполняем поля нашего созданого столбца, а именно в поле Имя пишем category_id, в поле Тип выбираем TINYINT, после этого в поле Длина/Значение ставим 4 и жмем кнопку Сохранить.
                </p>
                <p>
                    После этого жмем на вкладку Встаить и в открывшемся окне заполняем строки.<br>
                    Строку ID пропускаем почему смотрите более ранние уроки.<br>
                    В строке name пишем названием сериала - Во все тяжкие, далее в строке descriptions пишем - это описание сериала Во все тяжкие.<br>
                    В строке year пишем 2007, а строке add-date ставми дату когда вносим данные или оставляем те которые уже в нец указаны.<br>
                    В строке category_id ставим 2 и жмем на кнопку Вперед.
                </p>
                <p>
                    После того, как мы добавили в нашу таблицу movie данные о сериале, мы жмем на вкладку Обзор и снова видим содержимое нашей таблице.<br>
                    Теперь нам осталось внести данные в столбец category_id для ранее внесенных в таблицу данных.<br>
                    Для внесения необходимых данных в столбец category_id наводим мышку на данный поле данного столбеца в строке с фильмом Матрица и дважды кликаем мышку. Поле активировано для ввода ставим 1.<br>
                    Повторяем все операции для фильма Безумный Макс.<br>
                    Всё необходимые данные нами в нашу таблицу movie внесены.
                </p>
                <p>
                    Для понимания необходимо отметить, что взаимосвязь между таблицей movie и таблицей categories происходит через ключ category_id.
                </p>
            </div>
        </section>
        <section class="post-scr">
            <p>
                Конечно на практике в ходе разработки БД так не делается.<br>
                Первоначально собирается информация о данных которые должны содержаться в БД.<br>
                После чего на бумаге или в программе диаграмм(их много разных) рисуется схема построения таблиц с данными по определенным правилам о которых будет отдельный урок.<br>
                После построения диаграммы она проверяется в специальном программном продукте MySQL Workbench или аналогичной.<br>
                Программа MySQL Workbench моделирует работу нарисованной БД и это дает возможность создать более оптимальную модель для будующей БД.
            </p>
        </section>
        <section class=""></section>
    </main>

</body>

</html>